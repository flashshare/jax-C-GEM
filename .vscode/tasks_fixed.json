{
    "version": "2.0.0",
    "tasks": [
        // ========================================
        // ESSENTIAL EXECUTION TASKS
        // ========================================
        {
            "label": "üöÄ Run Model",
            "type": "shell",
            "command": "python",
            "args": [
                "src/main.py",
                "--mode",
                "run",
                "--output-format",
                "auto",
                "--no-physics-check"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üéØ Run the C-GEM model with adaptive optimization (auto-detects best format)"
        },
        {
            "label": "‚ö° Maximum Performance Mode",
            "type": "shell",
            "command": "python",
            "args": [
                "main_ultra_performance.py"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "‚ö° Ultra-high performance mode: 30,000+ steps/min with vectorized batch processing (2.5x faster)"
        },
        {
            "label": "üîß Setup Check",
            "type": "shell",
            "command": "python",
            "args": ["tools/setup_check.py"],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üîß Verify installation and configuration are ready for simulation"
        },
        {
            "label": "üî¨ Run with Physics Validation",
            "type": "shell",
            "command": "python",
            "args": [
                "src/main.py",
                "--mode",
                "run",
                "--output-format",
                "csv"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üî¨ Run with CSV output format"
        },
        {
            "label": "üêõ Debug Mode",
            "type": "shell",
            "command": "python",
            "args": [
                "src/main.py",
                "--mode",
                "run",
                "--output-format",
                "csv",
                "--debug"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üêõ Run with debug mode and CSV output"
        },

        // ========================================
        // ANALYSIS AND VISUALIZATION
        // ========================================
        {
            "label": "üé® Generate Comprehensive Publication Figures",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/plotting/publication_output.py",
                "--results-dir", "OUT",
                "--field-data-dir", "INPUT/Calibration",
                "--output-dir", "OUT/Publication"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üé® Generate comprehensive multi-panel publication figures: Hydrodynamics & Transport + Water Quality with 3-station analysis"
        },
        {
            "label": "üñºÔ∏è Legacy Publication Figures",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/plotting/publication_plots.py",
                "--results-dir", "OUT",
                "--output-dir", "OUT/Publication"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üñºÔ∏è Legacy interface to comprehensive publication figures (backward compatibility)"
        },
        {
            "label": "üìä Comprehensive Results Viewer",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/plotting/show_results.py",
                "--save-figures",
                "--detailed"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üìä Comprehensive results analysis with detailed plots and automatic saving"
        },
        {
            "label": "üîç Quick Results View",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/plotting/show_results.py"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üîç Quick interactive visualization (auto NPZ/CSV detection, enhanced analysis)"
        },

        // ========================================
        // BENCHMARKING AND VALIDATION
        // ========================================
        {
            "label": "‚öôÔ∏è Original C-GEM Benchmark",
            "type": "shell",
            "command": "cmd",
            "args": [
                "/c",
                "cd deprecated\\original-C-GEM && compile_and_run.bat"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "‚öôÔ∏è Compile and benchmark original C-GEM (365 days) - establishes performance baseline"
        },
        {
            "label": "üèÜ Comprehensive C-GEM vs JAX Benchmark",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/validation/comprehensive_cgem_benchmark.py",
                "--output-dir", "OUT/Benchmarks"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üèÜ Complete benchmark: performance, memory, accuracy, longitudinal profiles with publication-ready reports"
        },
        {
            "label": "üåä Field Data Validation",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/validation/validate_against_field_data.py",
                "--results-dir", "OUT",
                "--field-data-dir", "INPUT/Calibration",
                "--output-dir", "OUT/Validation"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üåä Validate model outputs against CARE, CEM, SIHYMECC field observations with comprehensive statistics"
        },
        {
            "label": "üìà Model Performance Analysis",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/validation/performance_analyzer.py",
                "--results-dir", "OUT"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üìà Analyze computational performance, memory usage, and execution statistics"
        },

        // ========================================
        // SCIENTIFIC ANALYSIS TOOLS
        // ========================================
        {
            "label": "üéØ Gradient-Based Calibration",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/calibration/gradient_calibrator.py",
                "--field-data-dir", "INPUT/Calibration",
                "--output-dir", "OUT/Calibration"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üéØ Run JAX-native gradient-based parameter calibration with sparse data methodology"
        },
        {
            "label": "üìà Sensitivity Analysis",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/analysis/sensitivity_analyzer.py",
                "--results-dir", "OUT",
                "--output-dir", "OUT/Sensitivity"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üìà Perform parameter sensitivity analysis using JAX autodiff with comprehensive reporting"
        },
        {
            "label": "üßÆ Process and Analyze Results",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/analysis/result_processor.py",
                "--results-dir", "OUT",
                "--field-data-dir", "INPUT/Calibration"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üßÆ Process and analyze simulation results with statistical summaries and field data comparison"
        },
        {
            "label": "üìä Generate Summary Statistics",
            "type": "shell",
            "command": "python",
            "args": [
                "-c",
                "from tools.plotting.publication_output import load_model_results, load_field_data; import numpy as np; results=load_model_results('OUT'); field_data=load_field_data('INPUT/Calibration'); print(f'Model Results: {len(results)} variables'); print(f'Field Data: {len(field_data)} datasets')"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üìä Quick summary statistics of model results and field data availability"
        },

        // ========================================
        // UTILITY TOOLS
        // ========================================
        {
            "label": "üìã Tools CLI",
            "type": "shell",
            "command": "python",
            "args": [
                "tools/tools_cli.py",
                "--help"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üìã Show available tools and utilities with command-line interface"
        },
        {
            "label": "üîç Data Format Inspector",
            "type": "shell",
            "command": "python",
            "args": [
                "-c",
                "import os; from pathlib import Path; out_path = Path('OUT'); print('=== OUTPUT DATA FORMATS ==='); npz_files = list(out_path.glob('*.npz')); csv_dirs = [d for d in out_path.iterdir() if d.is_dir()]; print(f'NPZ files: {len(npz_files)}'); [print(f'  - {f.name}') for f in npz_files]; print(f'CSV directories: {len(csv_dirs)}'); [print(f'  - {d.name}/') for d in csv_dirs]; print('=== FIELD DATA ==='); field_path = Path('INPUT/Calibration'); field_files = list(field_path.glob('*.csv')) if field_path.exists() else []; print(f'Field data files: {len(field_files)}'); [print(f'  - {f.name}') for f in field_files]"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üîç Inspect available data formats (NPZ/CSV) and field data files"
        },
        {
            "label": "üßπ Clean Output Directory",
            "type": "shell",
            "command": "python",
            "args": [
                "-c",
                "import shutil; import os; from pathlib import Path; out_path = Path('OUT'); pub_path = out_path / 'Publication'; bench_path = out_path / 'Benchmarks'; val_path = out_path / 'Validation'; print('Cleaning output directories...'); [shutil.rmtree(p) if p.exists() else None for p in [pub_path, bench_path, val_path]]; [p.mkdir(exist_ok=True) for p in [pub_path, bench_path, val_path]]; print('‚úÖ Output directories cleaned and recreated')"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üßπ Clean and recreate publication, benchmark, and validation output directories"
        },
        {
            "label": "üìÅ Create Publication Package",
            "type": "shell",
            "command": "python",
            "args": [
                "-c",
                "from tools.plotting.publication_output import create_comprehensive_publication_figures; import shutil; from pathlib import Path; print('üì¶ Creating complete publication package...'); figures = create_comprehensive_publication_figures('OUT', 'INPUT/Calibration', 'OUT/Publication'); print(f'‚úÖ Generated {len(figures)} publication figures'); pub_path = Path('OUT/Publication'); readme_content = f'# JAX C-GEM Publication Package\\n\\nGenerated: {__import__(\"datetime\").datetime.now()}\\n\\nFigures: {len(figures)}\\nFormats: PNG + PDF\\nQuality: 300 DPI\\n\\n## Contents:\\n' + '\\n'.join([f'- {Path(f).name}' for f in figures]); (pub_path / 'README.md').write_text(readme_content); print('üìã Package documentation created')"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "detail": "üìÅ Create complete publication package with comprehensive figures, documentation, and metadata"
        }
    ]
}
